* the javascript
** webaudioapi
i need to create an audio context
#+begin_src js :tangle ./html.js
  let samples = document.querySelectorAll(".js-sample")
  let context = new AudioContext
#+end_src

a buffer loadre class i've stolen from here: https://middleearmedia.com/web-audio-api-bufferloader/

#+begin_src js :tangle ./html.js
  function BufferLoader(context, urlList, callback) {
      this.context = context;
      this.urlList = urlList;
      this.onload = callback;
      this.bufferList = new Array();
      this.loadCount = 0;
  }

  BufferLoader.prototype.loadBuffer = function(url, index) {
      var request = new XMLHttpRequest();
      request.open("GET", url, true);
      request.responseType = "arraybuffer";

      var loader = this;

      request.onload = function() {
          loader.context.decodeAudioData(
              request.response,
              function(buffer) {
                  if (!buffer) {
                      alert('error decoding file data: ' + url);
                      return;
                  }
                  loader.bufferList[index] = buffer;
                  if (++loader.loadCount == loader.urlList.length)
                      loader.onload(loader.bufferList);
              }
          );
      }

      request.onerror = function() {
          alert('BufferLoader: XHR error');
      }

      request.send();
  }

  BufferLoader.prototype.load = function() {
      for (var i = 0; i < this.urlList.length; ++i)
          this.loadBuffer(this.urlList[i], i);
  }

  let loader = new BufferLoader(context, [].map.call(samples, n => n.src), bufferloaded)
  loader.load()
#+end_src



when play mode is active, every ~(60 / bpm) * 4~ we iterate through each of the 16 steps and ask each of the 16 sounds what their pitch (a number 1 - 16) and velocity (a number 1 - 16) are.

if we get a pitch and velocity we schedule that sound for ~(60 / bpm / 4) + (step * (60 / bpm / 4))~ on that sound's ~bufferSource~.

#+begin_src js :tangle ./html.js
  function createStore(handlers, state = state) {
      let subs = new Set
      return {
          get: function () {
              return state
          },
          send: function (event, data) {
              let handler = handlers[event]
              let previousState = Object.assign({}, state)
              if (handler) {
                  state = handler(state, data)
              } else {
                  throw new Error(`unknown handler: ${handler}`)
              }
              subs.forEach(sub => sub(previousState))
              return this
          },
          sub: function (fn) {
              subs.add(fn)
              return () => {
                  subs.delete(fn)
              }
          }
      }
  }

  let handlers = {
      nextStep(state) {
          state.time += (60 / state.bpm) / 4
          if (++state.step == 16) {
              state.step = 0
          }
          return state
      },
      play(state) {
          state.playing = !state.playing
          return state
      },
      setSoundStep(state, step) {
          let sound = state.sounds[state.sound]
          let value
          if (sound[step][0] == state.pitch) {
              value = null
          } else {
              value = [state.pitch, state.velocity]
          }

          state.sounds[state.sound] = sound.map((current, index) =>
              index == step
                  ? value
                  : current
          )
          return state
      },
      setPitch(state, value) {
          state.pitch = value
          return state
      }
  }

  let store = createStore(handlers,  {
      step: 0,
      time: 0,
      playing: false,
      mode: "normal",
      pattern: 0,
      sound: 0,
      pitch: 4,
      velocity: 15,
      bpm: 80,
      // the pitch and velocity each sound is playing at a given step
      sounds: [
          [[8, 15], null, null, null, [11, 15], null, null, null, [12, 15], null, null, null, [11, 15], null, null, null],
          [null, null, [0, 15], null, [3, 15], null, [0, 15], null, [4, 15], null, [6, 15], null, [0, 15], null, [6, 15], [7, 15]],
          [],
          [],
          [],
          [],
          [],
          [],
          [],
          [],
          [],
          [],
          [],
          [],
          [],
          [],
      ]
  })

  let sources = Array(16)

  /** the detune (in cents) for each pitch */
  let notes = [
      // 1
      -1200,
      // 2
      -1000,
      // 3
      -900,
      // 4
      -700,
      // 5
      -500,
      // 6
      -300,
      // 7
      -100,
      // 8
      0,
      // 9
      200,
      // 10
      300,
      // 11
      500,
      // 12
      700,
      // 13
      900,
      // 14
      1100,
      // 15
      1200,
      // 16
      21400,
  ]

  let scale = [
      notes[12], notes[13], notes[14], notes[15],
      notes[8], notes[9], notes[10], notes[11],
      notes[4], notes[5], notes[6], notes[7],
      notes[0], notes[1], notes[2], notes[3],
  ]

  let lookahead = 25
  let scheduleTime = 60 / store.get().bpm
  let queue = []

  function nextStep() {
      let state = store.get()
      store.send("nextStep")
  }

  function playSound(index, pitch, time) {
      let sample = loader.bufferList[index]
      if (sample) {
          let old = sources[index]
          if (old) {
              old.stop(time)
          }
          let source = sources[index] = context.createBufferSource()
          source.buffer = sample
          source.connect(context.destination)
          source.detune.setValueAtTime(scale[pitch], time)
          source.start(time)
      }
  }

  function scheduleStep() {
      let state = store.get()
      queue.push({step: state.step, time: state.time})
      state.sounds.forEach((sound, soundIndex) => {
          if (sound[state.step]) {
              let [pitch, velocity] = sound[state.step]
              playSound(soundIndex, pitch, state.time)
          }
      })
  }

  function scheduler() {
      let state = store.get()
      while (state.time < context.currentTime + scheduleTime) {
          scheduleStep(store)
          nextStep(store)
      }
  }

  let worker = new Worker("worker.js")
  worker.onmessage = function (event) {
      if (event.data == "tick") {
          scheduler(store)
      } else {
          console.log("WORKER", event.data)
      }
  }

  worker.postMessage({interval: lookahead})

  document.getElementById("play").onclick = function () {
      store.send("play")
  }

  store.sub(previous => {
      let state = store.get()
      if (previous.playing == state.playing) {
          return
      }

      if (state.playing) {
          state.step = 0
          state.time = context.currentTime
          worker.postMessage("play")
      } else {
          worker.postMessage("pause")
      }
  })

  let seqbuttons = document.querySelectorAll(".seq-button")

  store.sub((previous) => {
      let state = store.get()
      if (state.playing == previous.playing) return
      if (state.playing) {
          document.body.classList.add("playing")
      } else {
          document.body.classList.remove("playing")
      }
  })

  store.sub(previous => {
      let state = store.get()
      if (state.sound == previous.sound && state.sound[state.sound] == previous.sounds[state.sound]) {
          return
      }
  })

  // import { h, Component, render } from 'https://unpkg.com/preact?module'
  // import htm from 'https://unpkg.com/htm?module'
  // let html = htm.bind(h)

  seqbuttons.forEach(button => {
      button.addEventListener("click", () => {
          let state = store.get()
          if (state.mode == "write") {
              let step = button.id - 1
              // if (store.sounds[store.sound][step]) {
              //        store.send("clearSoundStep", step)
              // }
              store.send("setSoundStep", button.id - 1)
          }
          if (state.mode == "normal") {
              let pitch = button.id - 1
              store.send("setPitch", pitch)
              playSound(state.sound, pitch, context.currentTime)
          }
      })
  })

  write.addEventListener("click", () => {
      let state = store.get()
      store.send("mode", state.mode == "write" ? "normal" : "write")
  })

  function bufferloaded () {
  }
#+end_src


** state
#+begin_src typescript
  interface State {
      step: 0
      playing: boolean
      mode: "normal" | "sound" | "pattern" | "bpm" | "record" | "effects" | "write"
  }
#+end_src

** control types

*** buttons
**** play button
1. you press this
2. it starts playing
3. you press it again to stop

**** mode buttons
these are shiftables.
sound, pattern, bpm, record, effects, play and write.
they enable modes for the sequencer buttons.
let's talk about how they work and see if any patterns emerge.

***** sound
deactivates other modes
1. you press this
2. then press any of the sequencer buttons to select a sound
3. it deactivates

***** pattern
deactivates other modes
1. you press this
2. then press any of the sequencer buttons to select a pattern
3. it deactivates

***** bpm
deactivates other modes
1. you press this
2. then you turn A to select the bpm, or B to select the ummm
3. you press it again to deactivate

***** record
deactivates other modes
1. you press this
2. press 1-16 to start recording a sound for that button
3. press it (or any button) to stop

***** effects
deactivates other modes
1. you press this
2. press buttons 1-16 to activate an effect
3. you press it again to deactivate

***** write
deactivates other modes
1. you press this
2. you can press buttons 1-16 to set that note to play on that step
3. you press it again to deactivate write mode
**** sequencer buttons
these depend on what
*** encoder
at the moment this is a range, it shouldn't be. it /could/ be a type=number, or it could be two buttons? up and down... yes! i think it is two buttons

#+begin_src js :tangle ./html.js :comments both

#+end_src
